generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String           @id @default(cuid())
  clerkId         String           @unique
  email           String           @unique
  firstName       String?
  lastName        String?
  imageUrl        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bookings        Booking[]
  businesses      Business[]
  staff           Staff[]
  teamInvitations TeamInvitation[]
  notificationReadStatuses NotificationReadStatus[]

  @@map("users")
}

model Business {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  address              String?
  phone                String?
  email                String?
  website              String?
  imageUrl             String?
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ownerId              String
  stripeAccountId      String?
  stripeOnboarded      Boolean                @default(false)
  bookingFeePercentage Decimal                @default(5.0) @db.Decimal(4, 2)
  maxStaff             Int                    @default(1)
  plan                 String                 @default("free")
  planEndDate          DateTime?
  planStartDate        DateTime               @default(now())
  stripeCustomerId     String?
  stripeSubscriptionId String?
  // White-label fields
  isWhiteLabel         Boolean                @default(false)
  whitelabelConfig     WhiteLabelConfig?
  analytics            Analytics[]
  bookings             Booking[]
  customization        BusinessCustomization?
  owner                User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  clients              Client[]
  payouts              Payout[]
  services             Service[]
  staff                Staff[]
  subscriptions        Subscription[]
  teamInvitations      TeamInvitation[]

  @@map("businesses")
}

model Staff {
  id              String         @id @default(cuid())
  firstName       String
  lastName        String
  email           String?
  phone           String?
  imageUrl        String?
  role            String         @default("staff")
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  businessId      String
  userId          String?
  stripeAccountId String?
  availability    Availability[]
  bookings        Booking[]
  business        Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user            User?          @relation(fields: [userId], references: [id])
  staffServices   StaffService[]

  @@map("staff")
}

model Service {
  id            String         @id @default(cuid())
  name          String
  description   String?
  duration      Int
  price         Decimal        @db.Decimal(10, 2)
  isActive      Boolean        @default(true)
  category      String?
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  businessId    String
  bookings      Booking[]
  business      Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  staffServices StaffService[]
  addons        ServiceAddon[]

  @@map("services")
}

model ServiceAddon {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  duration    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_addons")
}

model StaffService {
  id        String  @id @default(cuid())
  staffId   String
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff     Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, serviceId])
  @@map("staff_services")
}

model Booking {
  id               String        @id @default(cuid())
  startTime        DateTime
  endTime          DateTime
  status           BookingStatus @default(PENDING)
  notes            String?
  totalAmount      Decimal       @db.Decimal(10, 2)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  clientName       String
  clientEmail      String
  clientPhone      String?
  userId           String?
  businessId       String
  staffId          String
  serviceId        String
  addonIds         String?       @default("[]")
  completedAt      DateTime?
  completedBy      String?
  fundsAvailableAt DateTime?
  business         Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  service          Service       @relation(fields: [serviceId], references: [id])
  staff            Staff         @relation(fields: [staffId], references: [id])
  user             User?         @relation(fields: [userId], references: [id])
  payments         Payment[]

  @@unique([clientEmail, serviceId, staffId, startTime])
  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Decimal       @db.Decimal(10, 2)
  platformFee     Decimal       @db.Decimal(10, 2)
  businessAmount  Decimal       @db.Decimal(10, 2)
  currency        String        @default("GBP")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bookingId       String
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Availability {
  id        String   @id @default(cuid())
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("availability")
}

model Subscription {
  id                String           @id @default(cuid())
  plan              SubscriptionPlan
  status            String           @default("active")
  stripeCustomerId  String?
  stripePriceId     String
  stripeSubId       String?
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  businessId        String
  business          Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Payout {
  id               String   @id @default(cuid())
  amount           Decimal  @db.Decimal(10, 2)
  status           String
  description      String?
  stripeTransferId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  businessId       String
  business         Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("payouts")
}

model Analytics {
  id            String   @id @default(cuid())
  date          DateTime @db.Date
  totalBookings Int      @default(0)
  totalRevenue  Decimal  @default(0) @db.Decimal(10, 2)
  newClients    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  businessId    String
  business      Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@map("analytics")
}

model Client {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String?
  dateOfBirth DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, email])
  @@map("clients")
}

model BusinessCustomization {
  id         String   @id @default(cuid())
  settings   Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  businessId String   @unique
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("business_customizations")
}

model TeamInvitation {
  id         String   @id @default(cuid())
  email      String
  firstName  String
  lastName   String
  phone      String?
  role       String
  status     String   @default("PENDING")
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  businessId String
  invitedBy  String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  inviter    User     @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([email, businessId])
  @@map("team_invitations")
}

model NotificationReadStatus {
  userId         String
  notificationId String
  readAt         DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, notificationId])
  @@map("notification_read_statuses")
}

model WhiteLabelConfig {
  id                    String   @id @default(cuid())
  businessId            String   @unique
  // Domain configuration
  customDomain          String?  @unique
  subdomain             String?  @unique
  // Branding
  brandName             String?
  logoUrl               String?
  faviconUrl            String?
  primaryColor          String   @default("#E91E63")
  secondaryColor        String   @default("#FFD700")
  accentColor           String   @default("#333333")
  fontFamily            String   @default("Inter")
  // Pricing
  platformFeePercentage Decimal  @default(1.0) @db.Decimal(4, 2)
  monthlyFee            Decimal  @default(200.00) @db.Decimal(10, 2)
  // Status
  isActive              Boolean  @default(true)
  // Billing
  stripeSubscriptionId  String?
  subscriptionStatus    String   @default("active")
  nextBillingDate       DateTime?
  // Metadata
  features              Json?    // Custom features enabled for this white-label
  settings              Json?    // Additional settings
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  business              Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("whitelabel_configs")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}
